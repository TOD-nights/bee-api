
更新并重启后端服务：

cd /root/bee-api && git pull
cd /root/bee-api/bee-api && go build -o beeapi main.go
kill -9 `ps -ef | grep beeapi | grep -v grep | awk '{print $2}'` && nohup ./beeapi > beeapi.log 2>&1 &
tail +F beeapi.log

# 检查端口是否正常监听
netstat -tulpn | grep beeapi
netstat -lanp | grep :8081
# 停止当前服务
pkill -f beeapi

go run main.go
这个命令会编译并立即运行 main.go 文件。适合快速测试和调试代码，因为它不会生成一个可执行文件，而是直接运行代码。

go build -o beeapi main.go
这个命令会编译 main.go 文件，并生成一个名为 beeapi 的可执行文件。适合构建发布版本，你可以将这个生成的二进制文件部署到服务器上运行。


cd /root/bee-api/server && go build -o server main.go
kill -9 `ps -ef | grep server | grep -v grep | awk '{print $2}'` && nohup ./server > server.log 2>&1 &
less +F server.log
tail +F server.log
 


netstat -tulpn | grep server
# 停止当前服务
pkill -f server







服务器上传GitHub
git add .
git commit -m "Add new files"
git push origin main



下载更新并重新构建前端：

cd /root/bee-api/web
git pull

npm install
npm run serve  # 开发环境
# 特点：
- 启动开发服务器，实时编译和热重载
- 代码不会被压缩混淆
- 包含 source map，方便调试
- 直接运行在内存中，不生成实际文件
- 通常运行在 localhost 上

# 或
npm run build  # 生产环境
# 特点：
- 生成静态文件，通常在 dist 目录下
- 代码会被压缩混淆，体积更小
- 移除调试信息
- 需要 web 服务器（如 nginx）来托管
- 针对性能做了优化


MySQL 数据库服务:
systemctl status mysql
# 如果没有启动则
systemctl start MySQL



